version: '3.8'

services:
  # Redis 서비스
  redis:
    image: redis:7-alpine
    container_name: trendai_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 백엔드 서비스 (Green)
  backend-green:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trendai_backend_green
    restart: unless-stopped
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      trendai_network:
        aliases:
          - backend-active   # <-- Green이 활성화일 때 이 alias를 받음

  # 백엔드 서비스 (Blue)
  backend-blue:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trendai_backend_blue
    restart: unless-stopped
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      trendai_network:
        aliases:
          - backend-active   # <-- Blue가 활성화일 때 이 alias를 받음

  # 프론트엔드 서비스 (Green)
  frontend-green:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost/api
    container_name: trendai_frontend_green
    restart: unless-stopped
    depends_on:
      backend-green:
        condition: service_healthy
    networks:
      trendai_network:
        aliases:
          - frontend-active   # <-- Green이 활성화일 때 이 alias를 받음

  # 프론트엔드 서비스 (Blue)
  frontend-blue:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost/api
    container_name: trendai_frontend_blue
    restart: unless-stopped
    depends_on:
      backend-blue:
        condition: service_healthy
    networks:
      trendai_network:
        aliases:
          - frontend-active   # <-- Blue가 활성화일 때 이 alias를 받음

  # Nginx 프록시 서비스
  nginx:
    image: nginx:alpine
    container_name: trendai_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend-green
      - frontend-blue
    networks:
      - trendai_network
    # nginx가 시작되기 전에 프론트엔드가 완전히 준비될 때까지 대기
    command: >
      sh -c "
        echo 'Waiting for frontend services to be ready...' &&
        sleep 30 &&
        nginx -g 'daemon off;'
      "

volumes:
  redis_data:

networks:
  trendai_network:
    driver: bridge
